

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
This file contains documentation for working with both service and third party
packages using gce's service api.

GCE RECOMMENDS DEVELOPERS TO PLAY WITH THE OPERATIONS PROVIDED IN THIS FILE
TO UNDERSTAND HOW THEY WORK BEFORE MAKING YOUR OWN GCCE SERVICE TERMINAL.

DO NOT HESITATE TO REPORT BUGS ENCOUNTERED IN ANY OPERATION IN THIS FILE
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-- SAPI TYPE = PKG
-- OPERATION TYPES =
   FOR ALL OPERAS IN THIS FILE, THE REPONSE PAYLOAD HOLDS THE OPERATION's RESPONSE 
   VALUE AND THE RESPONSE SIGNAL WOULD ALWAYS BE ACK/HASPAYLOAD REGARDLESS OF
   WETHER GCE ENCOUNTERED AN ERROR OR NOT.

   ADD => adds x numbers together where, x means `as many numbers provided.`
   payload => [...numbers]
   the payload should be an array containing the numbers to be added up.

   SUB => subtracts x numbers, starting from payload[0]
   payload => [...numbers]
   the payload should be an array containing the numbers to be subtracted
   by each other in a sequential order eg :
   payload [ 20, 1, 33 ] = 20 - 1,  value - 33.

   DIV => divides payload[0] by payload[1]
   payload => [ operand1, operand2 ]

   MULTIPLY => multiply payload[0] by payload[1]
   payload => [ operand1, operand2 ]

   MOD => divides payload[0] by payload[1] and returns its remainder (Modulo)
   payload => [ operand1, operand2 ]

   POW => returns the value of payload[0] ^ payload[1]
   payload => [ operand1, operand2 ]
   +++++++++++++++++++++++++++++++++++
   NOTE : THE ADD, SUB, DIV, MULTIPLY, MOD, POW are ligthweigth utilities/packages 
   for basic mathematics. thier purpose is to eleminate the need of rapid 
   switching from code editor to calculator or google search for maths expresssions.
   +++++++++++++++++++++++++++++++++++

   UINT => returns the total amount of values an unsigned integer of (payload) bit
   can store, where payload can only be 8, 16, 32, 64.
   payload => <8 || 16 || 32 || 64>

   INT => returns the total amount of values an integer of (payload) bit can
   store, where payload can only be 8, 16, 32, 64
   payload => <8 || 16 || 32 || 64>
   +++++++++++++++++++++++++++++++++++
   NOTE : THE UINT AND INT packages are useful when you (as a develeoper) 
   wants to know the exact capacity of the int/uint datatype you are utililizing.
   +++++++++++++++++++++++++++++++++++

   BYTES => converts x number of bits to bytes where bit is the value of payload.
   payload => <numberOfBitsToConvert>

   FREE => returns the machine's currently avaialable memory in a human readable
   format. this utitlity ignores the request payload.

   DIRSIZE => a bonus package that returns the most common disk size allocated 
   for an empty directory, which is 4KB. 
   this utitlity also ignores the request payload.

   MARSHAL => converts the requested json to a more readable and prettier format.
   payload => <the json to convert: must be of type string eg JSON.stringify()>
   NOTE: the response payload would also be of type string so you migth want to
   convert it to a json object.
   on javascript: JSON.parse();
   
   HMR => converts x number of bytes to a more human readable format eg GB, MB etc
   where x is the value of payload.
   payload => <numberOfBytes>
   
   OSPATH => returns the file path to where the specified operating system in the 
   payload stores contents.
   NOTE: in the os field, for linux kernel distributions, specify linux in the 
   field.
   payload => {
      "os" : "<windows||mac||linux>",
      "path" : "pathname"
   }
   availablePathNames : 
     mac = home, trash, data, config, temp, usrbin, net, syslogs, sbin, libfiles
       cache, cookies, fonts, keychains, agents, daemons, preferences, savedProgramState
     linux = home, trash, data, config, temp, usrbin, net, syslogs, sbin, libfiles
       cache, cookies, fonts, configs
     windows = home, trash, data, config, temp, usrbin, syslogs, sbin, cookies, fonts,
       configs
    where the pathName: data referes to the path where application data are stored,
       usrbin referes to the path where user installed applications binaries are stored,
       net referes to the path where network related binaries and objects are stored, 
       syslogs referes to the path where system logs are stored
       sbin referes to the path where system binaies are stored,
       libfiles referes to the path where system libaries files/bin are stored 
       cache referes to the path where runtime cached objects are stored.

   ASCII => returns/embed an ascii table to the response payload. 
   this utitlity ignores the request payload.

   ANSI => returns an ansi table containing ansi codes for colored terminal ouputs
   this utitlity also ignores the request payload.

   HEX => the hex package converts a decimal number to hexadecimal.
   payload => <decimalToConvert>
   NOTE: GCE RECOMMENDS THE PAYLOAD TO BE A WHOLE NUMBER
   YOU MIGTH GET INCORRECT RESULTS IF THE PAYLOAD IS TOO BIG WHICH IS BECAUSE OF THE 
   WAY JAVASCRIPT MIGTH INTERPRETE THE NUMBER DIVISION. GCE RECOMMENDS THE PAYLOAD
   STAYS LESS THAN 15 DIGITS LONG.
   this utitlity also ignores the request payload.

   DECI => the deci package converts a hexadecimal unit to decimal.
   payload => "<hexToConvert>"
   if the payload isnt a legal hexadecimal eg :
   must be UPPERCASE for letters and A - F, 0 - 9, a payload with string
  `Cannot Convert A None Hex To Deci` is returned.
   if the return decimal is to big, gce would break it down to 
   number.coninuatione+coninuation where coninuation and number are actual numbers.

   BIN => the bin package converts a decimal unit to binary.
   payload => <decimalToConvert>

   RGB => the rgb package converts a hexadecimal color to rgb format.
   payload => "<hex>"
   NOTE: do not include the hashtag at the starting point of the payload value
   as you would typically do in css.
   this package expects the payload to be of length 6 characters eg 03FFCC
   
   QUICK => the quick package generates basic templates for files.
   the quick package serves the same purpose as the vscode HTML:5 
   and lorem functions that lets you fill up a file with a template.
   payload => {
     "path": "relative/path/to/the/file/the/template/should/be/written"
     "template": "<theactualtemplate: eg html,etc...>" 
   }
   some of the avaialable template includes
     short, fill, lorem, bacon, actionscript, ada, applescript, assembly, autoit,
     basic, c, cpp ,csharp, clojure, cobol, coffeescript, d, dart, eiffel, erlang,
     fortran, go, groovy, haskell, html, java, javascript, julia, kotlin, latex,
     lisp, lua, matlab, mysql, nim, nodejs, objectivec, ocaml, perl, php, powershell,
     prolog, python, r, ruby, rust, scala, docker, k8s, nginx.
   NOTE: the file is created if it doesnt exists. a response with signal ENOENT 
   is responded if any of the directory specified in the path location does not exists.

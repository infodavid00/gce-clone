

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
This file contains documentation for working with both service and third party
packages using gce's service api.

GCE RECOMMENDS DEVELOPERS TO PLAY WITH THE OPERATIONS PROVIDED IN THIS FILE
TO UNDERSTAND HOW THEY WORK BEFORE MAKING YOUR OWN GCCE SERVICE TERMINAL.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-- SAPI TYPE = PKG
-- OPERATION TYPES =
   FOR ALL OPERAS IN THIS FILE, THE REPONSE PAYLOAD HOLDS THE OPERATION's RESPONSE 
   VALUE AND THE RESPONSE SIGNAL WOULD ALWAYS BE ACK/HASPAYLOAD REGARDLESS OF
   WETHER GCE ENCOUNTERED AN ERROR OR NOT.

   ADD => adds x numbers together where, x means `as many numbers provided.`
   payload => [...numbers]
   the payload should be an array containing the numbers to be added up.

   SUB => subtracts x numbers, starting from payload[0]
   payload => [...numbers]
   the payload should be an array containing the numbers to be subtracted
   by each other in a sequential order eg :
   payload [ 20, 1, 33 ] = 20 - 1,  value - 33.

   DIV => divides payload[0] by payload[1]
   payload => [ operand1, operand2 ]

   MULTIPLY => multiply payload[0] by payload[1]
   payload => [ operand1, operand2 ]

   MOD => divides payload[0] by payload[1] and returns its remainder (Modulo)
   payload => [ operand1, operand2 ]

   POW => returns the value of payload[0] ^ payload[1]
   payload => [ operand1, operand2 ]
   +++++++++++++++++++++++++++++++++++
   NOTE : THE ADD, SUB, DIV, MULTIPLY, MOD, POW are ligthweigth utilities/packages 
   for basic mathematics. thier purpose is to eleminate the need of rapid 
   switching from code editor to calculator or google search for maths expresssions.
   +++++++++++++++++++++++++++++++++++

   UINT => returns the total amount of values an unsigned integer of (payload) bit
   can store, where payload can only be 8, 16, 32, 64.
   payload => <8 || 16 || 32 || 64>

   INT => returns the total amount of values an integer of (payload) bit can
   store, where payload can only be 8, 16, 32, 64
   payload => <8 || 16 || 32 || 64>
   +++++++++++++++++++++++++++++++++++
   NOTE : THE UINT AND INT utilities/packages are useful when you (as a develeoper) 
   wants to know the exact capacity of the int/uint datatype you are utililizing.
   +++++++++++++++++++++++++++++++++++

   BYTES => converts x number of bits to bytes where bit is the value of payload.
   payload => <numberOfBitsToConvert>

   FREE => returns the machine's currently avaialable memory in a human readable
   format. this utitlity ignores the request payload.

   DIRSIZE => a bonus utility that returns the most common disk size allocated 
   for an empty directory, which is 4KB. 
   this utitlity also ignores the request payload.

   MARSHAL => converts the requested json to a more readable and prettier format.
   payload => <the json to convert: must be of type string eg JSON.stringify()>
   NOTE: the response payload would also be of type string so you migth want to
   convert it to a json object.
   on javascript: JSON.parse();
   